package secondGarage;

import java.util.Objects;

//make the class abstract to use an abstract method
public abstract class Vehicle implements Comparable<Vehicle> {

	private static int count = 1;

	private int id;
	private String dataName;
	private int noOfWheels;
	private String colour;
	private String travellingLocation;

	// Default constructor
	public Vehicle() {
		super();
		setId(id);
	}

	// constructor with all arguments
	public Vehicle(String dataName, int noOfWheels, String colour, String travellingLocation) {

		super();
		setId(count++);
		setDataName(dataName);
		setNoOfWheels(noOfWheels);
		setColour(colour);
		setTravellingLocation(travellingLocation);

	}

	// Auto generated from Source as getters and setters for updating values
	public String getDataName() {
		return dataName;
	}

	public void setDataName(String dataName) {
		this.dataName = dataName;
	}

	public int getNoOfWheels() {
		return noOfWheels;
	}

	public void setNoOfWheels(int noOfWheels) {
		this.noOfWheels = noOfWheels;
	}

	public String getColour() {
		return colour;
	}

	public void setColour(String colour) {
		this.colour = colour;
	}

	public String getTravellingLocation() {
		return travellingLocation;
	}

	public void setTravellingLocation(String travellingLocation) {
		this.travellingLocation = travellingLocation;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = count++;
	}

	public static int getCount() {
		return count;
	}

	// autogenerated from source for allowing .equals to work. Generate here first
	// then in the 'extends' classes
	@Override
	public int hashCode() {
		return Objects.hash(colour, dataName, noOfWheels, travellingLocation);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Vehicle other = (Vehicle) obj;
		return Objects.equals(colour, other.colour) && Objects.equals(dataName, other.dataName)
				&& noOfWheels == other.noOfWheels && Objects.equals(travellingLocation, other.travellingLocation);
	}

	@Override
	public int compareTo(Vehicle o) {
		return colour.compareTo(colour);

		// return o.id - id;
	}

	@Override
	public String toString()

	{
		return "Id: " + id + ", Name: " + dataName + ", No. of Wheels: " + noOfWheels + ", Colour: " + colour
				+ ", Travelling Location: " + travellingLocation + ", Bill Total: Â£" + calcBill();
	}

	// abstraction example
	public abstract int calcBill();

	// Main print Method, is overridden in extends classes - not needed when using
	// tostring
//	public void print() {
//
//		System.out.println("Name: " + dataName);
//		System.out.println("No. Of Wheels: " + noOfWheels);
//		System.out.println("Colour: " + colour);
//		System.out.println("Travelling Location: " + travellingLocation);
//	}
}
